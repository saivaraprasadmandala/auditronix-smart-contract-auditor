"use client";

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  ChevronDown,
  ChevronRight,
  FileText,
  Lightbulb,
  AlertTriangle,
  CheckCircle2,
  Shield,
  Zap,
} from "lucide-react";
import type { AuditResult } from "@/lib/types";

interface VulnerabilityListProps {
  auditData?: AuditResult | null;
}

export function VulnerabilityList({ auditData }: VulnerabilityListProps) {
  const [expandedItems, setExpandedItems] = useState<number[]>([0, 1]); // Expand both by default

  const toggleExpanded = (id: number) => {
    setExpandedItems((prev) =>
      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]
    );
  };

  const parseAuditFindings = (content: unknown) => {
    if (!content) return [];

    let text: string;
    if (typeof content === "string") {
      text = content;
    } else {
      text = JSON.stringify(content, null, 2);
    }

    // Split into individual findings
    const findings = text.split(/\.\s+/).filter((s) => s.trim());

    return findings
      .map((finding, index) => {
        const trimmedFinding = finding.trim();
        if (!trimmedFinding) return null;

        // Categorize findings
        const isVulnerability =
          /vulnerability|attack|exploit|reentrancy|overflow|underflow|unsafe|insecure|malicious/i.test(
            trimmedFinding
          );
        const isPerformance =
          /gas|inefficient|optimization|performance|loop|storage|expensive/i.test(
            trimmedFinding
          );
        const isCodeQuality =
          /quality|readability|documentation|comment|best practice|standard/i.test(
            trimmedFinding
          );
        const isAccessControl =
          /access|permission|authorization|owner|modifier|role/i.test(
            trimmedFinding
          );

        let category = "General";
        let icon = CheckCircle2;
        let color = "emerald";

        if (isVulnerability) {
          category = "Security Vulnerability";
          icon = AlertTriangle;
          color = "red";
        } else if (isPerformance) {
          category = "Performance Issue";
          icon = Zap;
          color = "yellow";
        } else if (isAccessControl) {
          category = "Access Control";
          icon = Shield;
          color = "purple";
        } else if (isCodeQuality) {
          category = "Code Quality";
          icon = FileText;
          color = "blue";
        }

        return {
          id: index,
          text: trimmedFinding,
          category,
          icon,
          color,
        };
      })
      .filter(Boolean);
  };

  const parseSuggestions = (content: unknown) => {
    if (!content) return [];

    let text: string;
    if (typeof content === "string") {
      text = content;
    } else {
      text = JSON.stringify(content, null, 2);
    }

    text = text.trim();

    // Handle array format like ["(1) text", "(2) text", ...]
    if (text.startsWith("[") && text.endsWith("]")) {
      try {
        const parsed = JSON.parse(text);
        if (Array.isArray(parsed)) {
          return parsed
            .map((item, index) => {
              if (typeof item !== "string") return null;

              const cleanText = item.trim();

              // Ignore if the item is just a number (like "1", "2", etc.)
              if (/^\d+$/.test(cleanText)) return null;

              // Categorization logic
              const isSecurityFix =
                /fix|patch|secure|protect|prevent|validate|check|reentrancy|overflow|access control/i.test(
                  cleanText
                );
              const isOptimization =
                /optimize|efficient|gas|performance|reduce|improve|loop|storage/i.test(
                  cleanText
                );
              const isDocumentation =
                /document|comment|natspec|explain|describe|add documentation/i.test(
                  cleanText
                );
              const isUpgrade = /upgrade|proxy|pattern|version|update/i.test(
                cleanText
              );

              let category = "General Improvement";
              let color = "emerald";
              let priority = "Medium";

              if (isSecurityFix) {
                category = "Security Fix";
                color = "red";
                priority = "High";
              } else if (isOptimization) {
                category = "Gas Optimization";
                color = "yellow";
                priority = "Medium";
              } else if (isDocumentation) {
                category = "Documentation";
                color = "blue";
                priority = "Low";
              } else if (isUpgrade) {
                category = "Upgradability";
                color = "purple";
                priority = "Medium";
              }

              return {
                id: index,
                text: cleanText,
                category,
                color,
                priority,
              };
            })
            .filter((item) => item && item.text); // filter nulls and empty texts
        }
      } catch (e) {
        console.error("Failed to parse suggestions array:", e);
      }
    }

    // Try pattern: "(1) text", "(2) text", etc.
    const numberedPattern = text.match(/$$\d+$$[^(]*/g);
    if (numberedPattern && numberedPattern.length > 1) {
      return numberedPattern
        .map((suggestion, index) => {
          const cleanSuggestion = suggestion.replace(/^$$\d+$$\s*/, "").trim();
          if (!cleanSuggestion) return null;

          // Categorize suggestions
          const isSecurityFix =
            /fix|patch|secure|protect|prevent|validate|check|reentrancy|overflow|access control/i.test(
              cleanSuggestion
            );
          const isOptimization =
            /optimize|efficient|gas|performance|reduce|improve|loop|storage/i.test(
              cleanSuggestion
            );
          const isDocumentation =
            /document|comment|natspec|explain|describe|add documentation/i.test(
              cleanSuggestion
            );
          const isUpgrade = /upgrade|proxy|pattern|version|update/i.test(
            cleanSuggestion
          );

          let category = "General Improvement";
          let color = "emerald";
          let priority = "Medium";

          if (isSecurityFix) {
            category = "Security Fix";
            color = "red";
            priority = "High";
          } else if (isOptimization) {
            category = "Gas Optimization";
            color = "yellow";
            priority = "Medium";
          } else if (isDocumentation) {
            category = "Documentation";
            color = "blue";
            priority = "Low";
          } else if (isUpgrade) {
            category = "Upgradability";
            color = "purple";
            priority = "Medium";
          }

          return {
            id: index,
            text: cleanSuggestion,
            category,
            color,
            priority,
          };
        })
        .filter(Boolean);
    }

    // Fallback to sentence splitting
    const sentences = text.split(/\.\s+/).filter((s) => s.trim());
    return sentences
      .map((sentence, index) => {
        const trimmedSentence = sentence.trim();
        if (!trimmedSentence) return null;

        return {
          id: index,
          text: trimmedSentence,
          category: "General Improvement",
          color: "emerald",
          priority: "Medium",
        };
      })
      .filter(Boolean);
  };

  if (!auditData) {
    return (
      <Card className="bg-zinc-800 border-zinc-700">
        <CardHeader>
          <CardTitle className="text-white">Detailed Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-64 text-zinc-500">
            No audit data available
          </div>
        </CardContent>
      </Card>
    );
  }

  const sections = Array.isArray(auditData)
    ? auditData
    : Object.values(auditData).flat();
  const auditReport = sections.find(
    (section) => section.section === "Audit Report"
  );
  const suggestions = sections.find(
    (section) => section.section === "Suggestions for Improvement"
  );

  const auditFindings = parseAuditFindings(auditReport?.details);
  const suggestionsList = parseSuggestions(suggestions?.details);

  const reportItems = [
    {
      id: 0,
      title: "Audit Report",
      icon: FileText,
      description: "Detailed security and code quality findings",
      data: auditFindings,
      type: "findings",
    },
    {
      id: 1,
      title: "Suggestions for Improvement",
      icon: Lightbulb,
      description: "Actionable recommendations to enhance your smart contract",
      data: suggestionsList,
      type: "suggestions",
    },
  ];

  return (
    <Card className="bg-zinc-800 border-zinc-700">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-white">
          <FileText className="w-5 h-5" />
          Detailed Analysis
        </CardTitle>
        <p className="text-sm text-zinc-400">
          Comprehensive audit findings and recommendations
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {reportItems.map((item, index) => {
          const isExpanded = expandedItems.includes(item.id);
          const Icon = item.icon;

          return (
            <motion.div
              key={item.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
              className="overflow-hidden border rounded-lg border-zinc-700"
            >
              <div
                className="p-4 transition-colors cursor-pointer hover:bg-zinc-700/50"
                onClick={() => toggleExpanded(item.id)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Icon className="w-5 h-5 text-emerald-400" />
                    <div>
                      <h4 className="font-semibold text-white">{item.title}</h4>
                      <p className="mt-1 text-xs text-zinc-400">
                        {item.description}
                      </p>
                      <p className="mt-1 text-xs text-zinc-500">
                        {item.data.length} items found
                      </p>
                    </div>
                  </div>
                  {isExpanded ? (
                    <ChevronDown className="w-4 h-4 text-zinc-400" />
                  ) : (
                    <ChevronRight className="w-4 h-4 text-zinc-400" />
                  )}
                </div>
              </div>

              <AnimatePresence>
                {isExpanded && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                    className="border-t border-zinc-700"
                  >
                    <div className="p-4 bg-zinc-900/50">
                      {item.type === "findings" ? (
                        <div className="space-y-4">
                          {item.data.map((finding: any, idx: number) => (
                            <motion.div
                              key={idx}
                              initial={{ opacity: 0, x: -20 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ delay: idx * 0.1 }}
                              className="flex gap-4 p-4 border rounded-lg bg-zinc-800/50 border-zinc-700/50"
                            >
                              <div className="flex-shrink-0">
                                <div
                                  className={`w-8 h-8 bg-${finding.color}-500 text-white rounded-full flex items-center justify-center`}
                                >
                                  <finding.icon className="w-4 h-4" />
                                </div>
                              </div>
                              <div className="flex-1 space-y-2">
                                <div className="flex items-center gap-2">
                                  <span
                                    className={`text-xs px-2 py-1 rounded-full bg-${finding.color}-500 text-white font-medium`}
                                  >
                                    {finding.category}
                                  </span>
                                </div>
                                <p className="text-sm leading-relaxed text-zinc-200">
                                  {finding.text}.
                                </p>
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {item.data.map((suggestion: any, idx: number) => (
                            <motion.div
                              key={idx}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: idx * 0.1 }}
                              className="flex gap-4 p-4 transition-colors border rounded-lg bg-zinc-800/50 border-zinc-700/50 hover:bg-zinc-800/70"
                            >
                              <div className="flex-shrink-0">
                                <div
                                  className={`w-8 h-8 bg-${suggestion.color}-500 text-white rounded-full flex items-center justify-center text-sm font-bold`}
                                >
                                  {idx + 1}
                                </div>
                              </div>
                              <div className="flex-1 space-y-2">
                                <div className="flex items-center gap-2">
                                  <span
                                    className={`text-xs px-2 py-1 rounded-full bg-${suggestion.color}-500 text-white font-medium`}
                                  >
                                    {suggestion.category}
                                  </span>
                                  <span
                                    className={`text-xs px-2 py-1 rounded-full ${
                                      suggestion.priority === "High"
                                        ? "bg-red-600"
                                        : suggestion.priority === "Medium"
                                        ? "bg-yellow-600"
                                        : "bg-green-600"
                                    } text-white font-medium`}
                                  >
                                    {suggestion.priority} Priority
                                  </span>
                                </div>
                                <p className="text-sm leading-relaxed text-zinc-200">
                                  {suggestion.text}
                                </p>
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      )}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          );
        })}
      </CardContent>
    </Card>
  );
}
